package main

import (
	"crypto/sha1"
	"fmt"
)

/*
SHA1散列经常用生成二进制文件或者文本块的短标识。
例如，git版本控制系统大量的使用 HA1来标识受版本控制的文件和目录。
这里是Go中如何进行SHA1散列计算的例子。
 */

func main() {
	s := "sha1 this string"

	//创建一个新的散列
	h := sha1.New()

	//写入要处理的字符
	h.Write([]byte(s))

	// 这个用来得到最终的散列值的字符切片。
	// Sum的参数可以用来给现有的字符切片追加额外的字节切片：一般不需要。
	bs := h.Sum(nil)
	fmt.Printf("%+v\n", h)
	fmt.Printf("%x\n", bs)

	/*
	output:
	&{h:[1732584193 4023233417 2562383102 271733878 3285377520] x:[115 104 97 49 32 116 104 105 115 32 115 116 114 105 110 103 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] nx:16 len:16}
	cf23df2207d99a74fbe169e3eba035e633b65d94

	你可以使用和上面相似的方式来计算其他形式的散列值。例如，计算MD5散列，引入crypto/md5并使用md5.New()方法。
	注意，如果你需要密码学上的安全散列，你需要小心的研究一下 哈希强度。
	 */
}
